/* 
objective: 
  - split code
  - map split code to an event
  - pass split code to event chain

design: 
  to be used as 'constant' object. properties are attached from the map (see init function), 
  so to change the deliminators on the fly one would have to manage the properties. from a 
  higher perspective, changing deliminators on the fly doesn't seem like a clean solution.
*/ 

var EventEmitter = require( 'events' ).EventEmitter;

function Parser( map ) {
  
  var instance = this
    , deliminators = init( map == undefined ? Parser.prototype.map : map );
  
  this.parse = function( code ) {

    var matches = code.match( deliminators );
    if (matches) {
      matches.forEach( function( match ) {
        var source = match.slice( 0, match.length - 1 ).trim();
        instance.emit( this[match[ match.length - 1 ]], source );
      } ); 
    }
  }; 
  
  function init( map ) {
    
    var regArg = '.*?[';    
    EventEmitter.call( this );
    for (property in map) {
      regArg = regArg.concat( property );
      this[property] = map[property];
    };
    return new RegExp( regArg + ']', 'g' );  
  }
}; 

Parser.prototype = new EventEmitter();
Parser.prototype.map = { ';': 'statement', '{': 'open', '}': 'close' };

module.exports.Parser = Parser;
