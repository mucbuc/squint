var assert = require( 'assert' )
  , Analyzer = require( 'squint/analyzer' ).Analyzer
  , Parser = require( 'squint/parser' ).Parser 
  , events = require( 'events' )
  , makeEmitTester = require( 'squint/test/tester' ).makeEmitTester;
  
function testAnalyzer( code, event, expect ) {
  var parser = new Parser()
    , instance = new Analyzer( parser );
  
  parser.expect( event, expect );
  parser.process( code );
  return parser;
}

function runTest() {

  var parser = makeEmitTester( new Parser() )
    , analyzer = makeEmitTester( new Analyzer( parser ) );

  parser.expect( 'open', 'a<b<>> text text()' );
  parser.expect( 'close' );
  parser.expect( 'open', 'abc()' );
  parser.expect( 'close' );
  parser.expect( 'open', 'class text' );
  parser.expect( 'close' );
 
  analyzer.expect( 'template parameters', 'a<b<>>' );
  analyzer.expect( 'function signature', 'text text()' );
  parser.process( 'a<b<>> text text() {} abc() {} class text{}' );
  
  

/*  
  testAnalyzer( 'text text() { text text; }', 'open function' );
  testAnalyzer( 'template text text() {}', 'open template function' );
  testAnalyzer( 'template< template< class > > text text() { text text; }', 'open template function' );
  testAnalyzer( 'namespace { text text; }', 'open namespace' );
  testAnalyzer( 'namespace xyz { text text; }', 'open namespace', 'xyz' );
*/
}

/*
function functionParameters() {
  var parser = new Parser( { 
      '(': 'open function', ')': 'close function', 
      '<': 'open template', '>': 'close template' 
    } );
  
  parser.expect( 'open function', 'a b' );
  parser.process( 'a b(' );

  parser.expect( 'open template', 'a b' );
  parser.process( 'a b<' );

  parser.expect( 'open function', 'a b' );
  parser.expect( 'close function', 'abc' );
  parser.process( 'a b( abc )' );
  
  parser.expect( 'open template', 'a b' );
  parser.expect( 'close template', 'abc' );
  parser.process( 'a b< abc >' );

  parser.expect( 'open template', 'a b' );
  parser.expect( 'close template', 'abc, cd' );
  parser.expect( 'open function', 'bla bla' );
  parser.expect( 'close function', 'xyz, zyx' );
  parser.process( 'a b< abc, cd > bla bla( xyz, zyx )' );
}
*/

module.exports = {
  run : runTest
};
  
