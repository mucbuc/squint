var assert = require( 'assert' )
  , Analyzer = require( 'squint/analyzer' ).Analyzer
  , Parser = require( 'squint/test/parser' ).Parser;

function TestAnalyzer( param, event, expect ) {
  var parser = new Parser()
    , instance = new Analyzer( parser );
  
  this.parse = parser.parse;

  parser.on( event, function( code ) {
    assert.deepEqual( code, expect );
    parser.on( 'error', function() {} );
  } );

  process.on( 'exit', function() {
    parser.emit( 'error', 'test failed: ' + param + ' ' + event );
  } );
}

//type( 'struct text {}', [ '', 'struct', 'text' ] );

functionDefinition( 'text text() {}', [ 'text', 'text' ] );
functionDefinition( 'text text() { text text; }', [ 'text', 'text' ] );
namespaceDeclaration( 'namespace { text text; }', '' );
namespaceDeclaration( 'namespace xyz { text text; }', 'xyz' );

function functionDefinition( param, expect ) {
  var analyzer = new TestAnalyzer( param, 'open function', expect ); 
  analyzer.parse( param );
}

function type( param, expect ) {
  var analyzer = new TestAnalyzer( param, 'open type', expect ); 
  analyzer.parse( param );
};

function namespaceDeclaration( param, expect ) {
  var analyzer = new TestAnalyzer( param, 'open namespace', expect ); 
  analyzer.parse( param );
}

