var assert = require( 'assert' )
  , Parser = require( 'squint/parser' ).Parser
  , Analyzer = require( 'squint/analyzer' ).Analyzer
  , events = require( 'events' );


functionDefinition( 'text text() {}', [ 'text', 'text' ] );
type( 'struct text {}', [ '', 'struct', 'text' ] );
namespace( '' );		// unnamed
namespace( 'test' );

function functionDefinition( param, expect ) {
  var emitter = new events.EventEmitter()
    , parser = new Parser( emitter )
    , analyzer = new Analyzer( emitter ); 
    
  function fail() {
    assert.fail( 'exit not expected', 'function test run not complete' );
  }

  emitter.on( 'open function', function( code ) {
    //assert.equal( code, expect );
    process.removeListener( 'exit', fail );
  } );
  
  process.on( 'exit', fail );
  parser.process( param );
}

function type( param, expect ) {

  var emitter = new events.EventEmitter()
    , parser = new Parser( emitter )
    , analyzer = new Analyzer( emitter ); 
    
  function fail() {
    assert.fail( 'exit not expected', 'type test run not complete' );
  }

  emitter.on( 'open type', function( code ) {
    //assert.equal( code, expect );
    process.removeListener( 'exit', fail );
  } );

  process.on( 'exit', fail );
  parser.process( param );
};

function namespace( expect ) {
  var emitter = new events.EventEmitter()
    , parser = new Parser( emitter )
    , analyzer = new Analyzer( emitter ); 
    
  function fail() {
    assert.fail( 'exit not expected', 'namespace test run not complete' );
  }
  
  emitter.on( 'open namespace', function( code ) {
    assert.equal( code, expect );    
    process.removeListener( 'exit', fail );
  } ); 
  
  process.on( 'exit', fail );
  parser.process( 'namespace ' + expect + ' { text text; }' );
}