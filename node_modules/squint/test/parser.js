var assert = require( 'assert' )
  , Parser = require( 'squint/parser' ).Parser;

function TestParser( map ) {
  var expectations = []
    , instance = this;

  Parser.call( this, map );
  
  process.on( 'exit', function() {
    assert.equal( expectations.length, 0 );
  } );

  this.expect = function( event, code ) {
    if (!expectations.length) {
      instance.once( event, check );
    }
    expectations.push( { event: event, code: code } );
  }; 

  function check( code ) {
    var expectation = expectations[0];
    expectations.splice( 0, 1 );
   
    if (expectation.code != undefined) {
      assert.deepEqual( code, expectation.code );
    }
    
    if (expectations.length) {
      instance.once( expectations[0].event, check );
    
      console.log( 'added event ' + expectations[0].event );
    }
  }
};

TestParser.prototype = new Parser();

module.exports = { 
  run : function() {
    
    functionParameters();
    
    testNested();
    testInterleaved();
    testScopes();
    testStatments();
  }, 
  Parser: TestParser
};

function functionParameters() {
  var parser = new TestParser( { 
      '(': 'open function', ')': 'close function', 
      '<': 'open template', '>': 'close template' 
    } );
  
  parser.expect( 'open function', 'a b' );
  parser.process( 'a b(' );

  parser.expect( 'open template', 'a b' );
  parser.process( 'a b<' );

  parser.expect( 'open function', 'a b' );
  parser.expect( 'close function', 'abc' );
  parser.process( 'a b( abc )' );
  
  parser.expect( 'open template', 'a b' );
  parser.expect( 'close template', 'abc' );
  parser.process( 'a b< abc >' );

  parser.expect( 'open template', 'a b' );
  parser.expect( 'close template', 'abc, cd' );
  parser.expect( 'open function', 'bla bla' );
  parser.expect( 'close function', 'xyz, zyx' );
  parser.process( 'a b< abc, cd > bla bla( xyz, zyx )' );
}

function testNested() {
  var parser = new TestParser();

  parser.expect( 'open', 'a' );
  parser.expect( 'open', 'b' );
  parser.expect( 'statement', 'c' );
  parser.expect( 'close' );
  parser.expect( 'close' );

  parser.process( 'a { b { c; } }' );
};

function testInterleaved() { 
  var parser = new TestParser();
  
  parser.expect( 'open', 'a' );
  parser.expect( 'statement','b' );
  parser.expect( 'close' );
   
  parser.process( 'a{ b; }' );
}

function testScopes() {
  var parser = new TestParser();
  
  parser.expect( 'open', 'a' ); 
  parser.expect( 'close' );
  parser.expect( 'open', 'b' );
  parser.expect( 'close' );
  parser.expect( 'open', 'c' );
  parser.expect( 'close' );
 
  parser.process( 'a{} b{} c{}' );
}

function testStatments() {
  var parser = new TestParser();

  parser.expect( 'statement', '1' );
  parser.expect( 'statement', '2' );
  parser.expect( 'statement', '3' );
  parser.expect( 'statement' );
 
  parser.process( '1; 2; 3;;' );
}
