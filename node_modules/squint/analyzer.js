var namespaceDeclare = new RegExp( 'namespace\\s*\\w*\\s*', 'g' )
  , namespaceDeclarator = new RegExp( 'namespace\\s*', 'g' )
  , typeDeclare = new RegExp( '\\w+' )
  , typeDeclarator = new RegExp( '(.*)\\s*(class|struct)\\s+(\\w+)' )
  , templateHeader = new RegExp( '\\s*template' )
  , Parser = require( 'squint/parser' ).Parser;
  
function Analyzer( parser ) {

  var instance = this;

  Parser.call( this, { 
    '<': 'open template', 
    '>': 'close template', 
    '(': 'open function', 
    ')': 'close function' 
  } );

  parser.on( 'open', function( code ) {
  
    var templateParams = { code: '', depth: 0 }
      , functionParams = { code: '', depth: 0 };
    
    instance.on( 'open template', function( code ) {
      templateParams.code += code + '<';
      ++templateParams.depth;
    } );
    
    instance.on( 'close template', function() { 
      templateParams.code += '>';
      if (!--templateParams.depth) {
        instance.emit( 'template parameters', templateParams.code );
      }
    } );
    
    instance.on( 'open function', function( code ) {
      functionParams.code += code + '(';
      ++functionParams.depth;
    } ); 
    
    instance.on( 'close function', function() {
      functionParams.code += ')';
      if (!--functionParams.depth) {
        instance.emit( 'function signature', functionParams.code );
      }
    } ); 
    instance.process( code );
    
  } );
}

Analyzer.prototype = new Parser();

module.exports.Analyzer = Analyzer; 
