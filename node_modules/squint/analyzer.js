var namespaceDeclare = new RegExp( 'namespace\\s*\\w*\\s*', 'g' )
  , namespaceDeclarator = new RegExp( 'namespace\\s*', 'g' )
  , typeDeclare = new RegExp( '\\w+' )
  , typeDeclarator = new RegExp( '(.*)\\s*(class|struct)\\s+(\\w+)' )
  , templateHeader = new RegExp( '\\s*template' )
  , Parser = require( 'squint/parser' ).Parser;

function Analyzer( parser ) {

  var instance = this;

  Parser.call( this, { 
    '<': 'open template', 
    '>': 'close template'
  } );

  parser.on( 'open', function( code ) {

    var templateSignature = ''
      , templateDepth = 0;

    instance.on( 'open template', function( code ) {
      templateSignature += code + '<';
      ++templateDepth;
    } );
    
    instance.on( 'close template', function( code ) { 
      templateSignature += code + '>';
      if (!--templateDepth) {
        instance.emit( 'template parameters', templateSignature );
        templateSignature = '';
      }
    } );
    instance.process( code );
/*

    '(': 'open function', 
    ')': 'close function' 
    
    
      , functionSignature = ''
      , functionDepth = 0

    instance.on( 'open function', function( code ) {
      functionSignature += code + '(';
      ++functionDepth;
    } ); 
    
    instance.on( 'close function', function() {
      functionSignature += ')';
      if (!--functionDepth) {
        instance.emit( 'function signature', functionSignature );
      }
    } ); 
    if (!functionSignature.length) {
      instance.emit( 'type signature', code )
    }
    */
    
  } );
}

Analyzer.prototype = new Parser();

module.exports.Analyzer = Analyzer; 
