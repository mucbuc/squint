var namespaceDeclare = new RegExp( 'namespace\\s*\\w*\\s*', 'g' )
  , namespaceDeclarator = new RegExp( 'namespace\\s*', 'g' )
  , typeDeclare = new RegExp( '\\w+' )
  , typeDeclarator = new RegExp( '(.*)\\s*(class|struct)\\s+(\\w+)' )
  , templateHeader = new RegExp( '\\s*template' )
  , Parser = require( 'squint/parser' ).Parser;
  
function Analyzer(emitter) {
  emitter.on( 'open', function( code ) {
  
    var parser = new Parser( { 
        '(': 'open function', 
        ')': 'close function',
        '<': 'open template', 
        '>': 'close template' 
      } );
    
    parser.on( 'open template', function() {
      /* at this point i need to stop fiddling with the 
      events and record the data. write the data on 
      'close template'*/ 
    
 	  process.nextTick( function() {
 	    emitter.emit( 'open template' );
 	  } );
 	} );
    parser.process( code );
      
  /*  
    if (code.search( namespaceDeclare ) != -1) {
      var name = code.replace( namespaceDeclarator, '' );
      emitter.emit( 'open namespace', name );
    }
    else if (code[ code.length - 1 ] == ')')
    {
      if (code.search( templateHeader ) == 0) {
        emitter.emit( 'open template function' );
      } 
      else {
        emitter.emit( 'open function' );
      }
    }
    else if (code.search( templateHeader ) == 0) {
      emitter.emit( 'open template type' );
    }
    else {
      emitter.emit( 'open type' );
    }
  */
  } );
}

module.exports.Analyzer = Analyzer; 
