//  , typeDeclarator = new RegExp( '(.*)\\s+(class|struct)\\s+(\\w*)\\s+[:{]' );
  //, typeDeclare = new RegExp( '\\w+\\s+[:{]' )
//(.*>)\s+(class|struct)\s+(\w*)\s+[:{]

var namespaceDeclare = new RegExp( 'namespace\\s*\\w*\\s*', 'g' )
  , namespaceDeclarator = new RegExp( 'namespace\\s*', 'g' )
  , typeDeclare = new RegExp( '\\w+' )
  , typeDeclarator = new RegExp( '(.*)\\s*(class|struct)\\s+(\\w+)' )
  , templateHeader = new RegExp( '\\s*template' )
  , Parser = require( 'squint/parser' ).Parser;

function Analyzer( emitter ) {

  Parser.call( this, emitter );

  emitter.on( 'open', function( code ) {
    if (code.search( namespaceDeclare ) != -1) {
      var name = code.replace( namespaceDeclarator, '' );
      emitter.emit( 'open namespace', name );
    }
    else if (code[ code.length - 1 ] == ')')
    {
      if (code.search( templateHeader ) == 0) {
        emitter.emit( 'open template function', '' );
      } 
      else {
        emitter.emit( 'open function', '' ); 
      }
    }
    else if (code.search( templateHeader ) == 0) {
      emitter.emit( 'open template type', '' );
    }
    else {
      emitter.emit( 'open type', '' );
    }
  } );

}
Analyzer.prototype = new Parser();

module.exports.Analyzer = Analyzer; 
