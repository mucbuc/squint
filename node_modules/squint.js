/* 
note: order matters
	i.e. functionForward only works after typeForwards have been removed
*/ 

var commentSingle = new RegExp( '\/\/.*\n?', 'g' )
  , commentMultiple = new RegExp( '\/\\*.*?\\*\/', 'mg' )
  , include = new RegExp( '#.*include.*\n?' )
  , defineNewLine = new RegExp( '\\\\[ \t]*\n', 'mg' )
  , define = new RegExp( '#.*define.*\s*\n?', 'g' )
  , undefine = new RegExp( '#.*undef.*\n?', 'mg' )
  , typeDeclare = new RegExp( 'class[^\{]*;|template[^\{]*;|struct[^\{]*;' )
  , functionForward = new RegExp( '.*?\\\)[ \t]*?;' )
  , stringLiteral = new RegExp( '".*?([^\\\\]")', 'g' );

module.exports.defineFunctions = function( code ) {
  code = module.exports.stripComments( code );
  code = module.exports.stripIncludes( code );
  code = module.exports.stripDefines( code );
  code = module.getFunctionForwardDeclares( code );
  
  code = code.replace( ';', '{}' );
  return code;
};
    
module.exports.getFunctionForwardDeclares = function( code ) {
  code = code.match( functionForward );
  if (!code) {
    code = '';
  }
  return code;
};  

module.exports.getTypeDeclares = function( code ) {
  code = code.match( typeDeclare );
  if (!code) {
    code = '';
  }
  return code;
};

module.exports.stripStrings = function( code ) { 
  code = code.replace( stringLiteral, '' );
  return code;
};

module.exports.stripDefines = function( code ) {
  code = code.replace( defineNewLine, '' );
  code = code.replace( define, '' );
  code = code.replace( undefine, '' );
  return code;
};

module.exports.stripIncludes = function( code ) {
  code = code.replace( include, '' );
  return code;
}; 

module.exports.stripComments = function( code ) {
  code = code.replace( commentSingle, '' );
  code = code.replace( commentMultiple, '' );
  return code;
};
	